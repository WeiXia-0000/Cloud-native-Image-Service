AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cloud-native Image Service (Phase 0 init).

Globals:
  Function:
    Runtime: python3.11
    Timeout: 15
    MemorySize: 256
    Tracing: Active
    Environment:
      Variables:
        TABLE: !Ref MetaTable
        DST_BUCKET: !Ref ProcessedBucket
        REDIS_HOST: !Ref RedisHost
        CF_DOMAIN: !If [ UseCloudFront, !GetAtt CloudFrontDistribution.DomainName, "" ]
        ENABLE_REDIS: !Ref EnableRedis
        ENABLE_CLOUDFRONT: !Ref EnableCloudFront

Parameters:
  SourceBucketName:
    Type: String
    Default: img-source-bucket-${AWS::StackName}
  ProcessedBucketName:
    Type: String
    Default: img-processed-bucket-${AWS::StackName}
  CloudFrontDomain:
    Type: String
    Default: ""
  RedisHost:
    Type: String
    Default: ""
  EnableRedis:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  EnableCloudFront:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"

Conditions:
  UseCloudFront: !Equals [ !Ref EnableCloudFront, "true" ]

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName

  ProcessedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ProcessedBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']

  MetaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-meta"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-processor"
      CodeUri: serverless/lambda/
      Handler: processor.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref SourceBucketName
        - S3WritePolicy:
            BucketName: !Ref ProcessedBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref MetaTable
      Events:
        S3ImageUpload:
          Type: S3
          Properties:
            Bucket: !Ref SourceBucket
            Events: s3:ObjectCreated:*

  ReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-reader"
      CodeUri: serverless/lambda/
      Handler: reader.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref MetaTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub arn:aws:s3:::${ProcessedBucket}/*
      Events:
        ApiHealth:
          Type: Api
          Properties:
            Path: /health
            Method: GET
        ApiGetMeta:
          Type: Api
          Properties:
            Path: /meta/{key+}
            Method: GET
        ApiGetImg:
          Type: Api
          Properties:
            Path: /img/{key+}
            Method: GET
        ApiHeadMeta:
          Type: Api
          Properties:
            Path: /meta/{key+}
            Method: HEAD
        ApiHeadImg:
          Type: Api
          Properties:
            Path: /img/{key+}
            Method: HEAD

  CFOriginAccessControl:
    Condition: UseCloudFront
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac"
        Description: Access S3 ${ProcessedBucket} via OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Condition: UseCloudFront
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: ""
        Origins:
          - Id: ProcessedS3Origin
            DomainName: !GetAtt ProcessedBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref CFOriginAccessControl
        DefaultCacheBehavior:
          TargetOriginId: ProcessedS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  ProcessedBucketPolicyForCF:
    Condition: UseCloudFront
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProcessedBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontReadViaOAC
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${ProcessedBucket}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

Outputs:
  ApiUrl:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  SourceBucket:
    Value: !Ref SourceBucketName
  ProcessedBucket:
    Value: !Ref ProcessedBucketName
  TableName:
    Value: !Ref MetaTable
  CloudFrontDomain:
    Condition: UseCloudFront
    Value: !GetAtt CloudFrontDistribution.DomainName